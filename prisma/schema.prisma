// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id           Int      @id @default(autoincrement())
  name         String
  nis          String   @unique
  birth_date   DateTime?
  gender       String   // L atau P
  is_alumni    Boolean?
  nik          String?   @unique
  kk           String?
  father_name  String?
  mother_name  String?
  father_job   String?
  mother_job   String?
  origin_school String?
  nisn         String?   @unique
  birth_place  String?
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  qr_token     String?   @unique
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  avatar       String?
  roleId       Int           @default(1)
  role         Role          @relation(fields: [roleId], references: [id])
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  notifications Notification[] @relation("UserNotifications")
}

model Notification {
  id          Int       @id @default(autoincrement())
  title       String
  message     String    @db.Text
  isRead      Boolean   @default(false)
  type        String    @default("info") // info, warning, success, error
  userId      Int
  user        User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}
